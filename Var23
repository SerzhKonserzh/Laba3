#include <iostream>
#include <cstring>
#include <string>
using namespace std;
class mas
{
private:
	int* ms;
	int size;
public:
	mas()
	{
		size = 1;
		ms=new int[size];
	}
	mas(int amount)
	{
		ms=new int[amount];
		size = amount;
	}
	mas(const mas &obj)
	{
		this->size = obj.size;
		this->ms = new int[size];
		for (int i = 0; i < size; i++)
		{
			this->ms[i] = obj.ms[i];
		}
	}
	~mas() {
		delete [] ms;
	}
	int get_elem(int el)
	{
		return ms[el];
	}
	void set_elem(int el,int new_el)
	{
		ms[el] = new_el;
	}
	void set_size(int sizer)
	{
		this->size = sizer;
	}
	int get_size(int sizer)
	{sizer=this->size;
	return sizer;
	}
	void memory(int sizer)
	{
		this->size = sizer;
		this->ms = new int[size];
	}
	void shell()
	{
		int temp, S;
		int i, j;
		S = size;
		S = S / 2;
		while (S > 0)
		{
			for (i = 0; i < size - S; i++)
			{
				j = i;
				while (j >= 0 && ms[j] > ms[j + S])
				{
					temp = ms[j];
					ms[j] = ms[j + S];
					ms[j + S] = temp;
					j--;
				}
			}
			S = S / 2;
		}
	}
	mas operator+(const mas& second)
	{
		
		if (this->size != second.size)
		{
			cout << "Different sizes";
			return mas();
		}
		else
		{
			mas ms3(size);
			for (int i = 0; i < this->size; i++)
			{
				ms3.ms[i] = this->ms[i] + second.ms[i];
			}
			return ms3;
		}

	}
	mas operator-(const mas& second)
	{
		
		if (this->size != second.size)
			return mas();
		else
		{
            mas ms3(size);
			for (int i = 0; i < this->size; i++)
			{
				ms3.ms[i] = this->ms[i] - second.ms[i];
			}
			return ms3;
		}
	}
	friend ostream& operator<<(ostream& out, const mas& m);
};
ostream& operator<<(ostream& out, const mas& m)
{
	for (int i = 0; i < m.size; i++)
	{
		out<<m.ms[i]<<" ";
	}
	out << "\n";
	return out;
}
int main()
{
	int new_el;
	mas m1(5), m2(5);
	mas* mtx;
	int sizer;
	int mtx_size;
	//8.Создание экземпляров класса и перегрузка
	cout << "MS1:" << endl;
	for (int i = 0; i < 5; i++)
	{
		cout << "Enter element(ms1): ";
		cin >> new_el;
		m1.set_elem(i, new_el);
	}
	cout << "MS2:" << endl;
	for (int i = 0; i < 5; i++)
	{
		cout << "Enter element(ms2): ";
		cin >> new_el;
		m2.set_elem(i, new_el);
	}
	cout << "MS1:\n";
	cout << m1;
	cout << "MS2:\n";
	cout << m2;
	system("pause");
	mas m3 = m1 - m2;
	mas m4 = m1 + m2;
	cout << "MS1-MS2:\n";
	cout << m3;
	cout << "MS1+MS2:\n";
	cout << m4;
	system("pause");
	//9.Динамическое создание,копия и преобразование
	cout << "Enter size of array: ";
	do
	{
		cin >> sizer;
	} while (sizer <= 0);
	mas md1(sizer);
	md1.set_size(sizer);
	for (int i = 0; i < sizer; i++)
	{
		cout << "Enter element(md1): ";
		cin >> new_el;
		md1.set_elem(i, new_el);
	}
	mas md2(md1);
	cout << "MS:\n";
	cout << md1;
	cout << "MS(copy):\n";
	cout << md2;
	system("pause");
	for (int i = 0; i < sizer; i++)
	{
		new_el = md2.get_elem(i) + 2;
		md2.set_elem(i, new_el);
	}
	cout << "MS(default):\n";
	cout << md1;
	cout << "MS+2:\n";
	cout << md2;
	system("pause");
	//Динамическое создание массива экземпляров класса
	cout << "Enter size of class array: ";
	do
	{
		cin >> mtx_size;
	} while (mtx_size <= 0);
	mtx = new mas[mtx_size];
	for (int i = 0; i < mtx_size; i++)
	{
		cout << "Enter size of " << i + 1 << " array in class array: ";
		do
		{
			cin >> sizer;
		} while (sizer <= 0);
		mtx[i].memory(sizer);
		for (int j = 0; j < sizer; j++)
		{
			cout << "Enter element: ";
			cin >> new_el;
			mtx[i].set_elem(j, new_el);
		}
	}
	cout << "Class array:\n";
	for (int i = 0; i < mtx_size; i++)
	{
		cout << mtx[i];
	}
	system("pause");
	for (int i = 0; i < mtx_size; i++)
	{
		sizer = mtx[i].get_size(sizer);
		for (int j=0; j < sizer; j++)
		{
			new_el = mtx[i].get_elem(j) * 2;
			mtx[i].set_elem(j, new_el);
		}
	}
	cout << "Class array*2: \n";
	for (int i = 0; i < mtx_size; i++)
	{
		cout << mtx[i];
	}
	system("pause");
	return 0;
}
